# -*- coding: utf-8 -*-
"""D5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gaK9fU2TNIYmeG6xlKbVw2Ds9qC1sshO
"""

from google.colab import drive
drive.mount("/content/gdrive")

pip install --upgrade plotly

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import pandas as pd
from glob import glob
from collections import Counter
import numpy as np
import plotly
import plotly.express as px

!pip install pycountry_convert 
from pycountry_convert import country_alpha2_to_continent_code, country_name_to_country_alpha2, convert_continent_code_to_continent_name

# Commented out IPython magic to ensure Python compatibility.
# %cd gdrive/My\ Drive/Data/archive
!ls

data = pd.read_json("unece.json")
print(data.columns)
data.head()

print(data.info())

df = data.copy()
years = ['2005','2006','2007']
Yeardf = df.loc[df['Year'].isin(years)]
df.fillna("None", inplace=True)
df = Yeardf.groupby(by = "Country", as_index = False).mean()

df['Continent'] = None

for i,row in df.iterrows():
  try:
    df.loc[i,'Continent'] = convert_continent_code_to_continent_name(country_alpha2_to_continent_code(country_name_to_country_alpha2(row['Country'])))
    
  except: 
    pass

df.head()

df = df[df.Country != "The former Yugoslav Republic of Macedonia"]
df["World"] = "World"
# fig = px.treemap(df, path=["World","Continent","Country"],values = "Male")
df = df.rename(columns = {"Exchange rate (XR), NCU per US$" : "XR_NCU",
                          "GDP at current prices and PPPs, millions of US$" : "GDP"})
df["XR"] = df.apply(lambda row : 1.0/row["XR_NCU"],axis = 1)
fig = px.treemap(df, path=["World","Continent","Country"],values = "GDP",
                  color='XR',
                  color_continuous_scale='RdBu',
                  branchvalues = "total"
                  )

fig.show()

df = data.copy()
years = ['2008','2009','2010']
Yeardf = df.loc[df['Year'].isin(years)]
df.fillna("None", inplace=True)
df = Yeardf.groupby(by = "Country", as_index = False).mean()

df['Continent'] = None

for i,row in df.iterrows():
  try:
    df.loc[i,'Continent'] = convert_continent_code_to_continent_name(country_alpha2_to_continent_code(country_name_to_country_alpha2(row['Country'])))
    
  except: 
    pass


df = df[df.Country != "The former Yugoslav Republic of Macedonia"]
df["World"] = "World"
# fig = px.treemap(df, path=["World","Continent","Country"],values = "Male")
df = df.rename(columns = {"Exchange rate (XR), NCU per US$" : "XR_NCU",
                          "GDP at current prices and PPPs, millions of US$" : "GDP"})
df["XR"] = df.apply(lambda row : 1.0/row["XR_NCU"],axis = 1)
fig = px.treemap(df, path=["World","Continent","Country"],values = "GDP",
                  color='XR',
                  color_continuous_scale='RdBu',
                  branchvalues = "total"
                  )

fig.show()

Nations = df.loc[df.XR > 1].Country.values
print(Nations)

df_poornations = Yeardf.loc[Yeardf['Country'].isin(Nations)]
print(df_poornations.shape)
df.head()

cols = {'GDP at current prices and PPPs, millions of US$' : 'GDP',
       'Country' : 'Country', 'GDP: in agriculture etc. (ISIC4 A), output approach, per cent share of GVA' : "Agriculture",
       'GDP: in industry etc. (ISIC4 B-E), output approach, per cent share of GVA' : 'Industry',
       'GDP: in construction (ISIC4 F), output approach, per cent share of GVA' : 'Construction',
       'GDP: in trade, hospitality, transport and communication (ISIC4 G-J), output approach, per cent share of GVA' : 'Trade',
       'GDP: in finance and business services (ISIC4 K-N), output approach, per cent share of GVA' : 'Finance',
       'GDP: in public administration, education and health (ISIC4 O-Q), output approach, per cent share of GVA' : 'Administration',
       'GDP: in other service activities (ISIC4 R-U), output approach, per cent share of GVA' : 'Others',}

df2 = df_poornations.filter(['GDP at current prices and PPPs, millions of US$',
       'Country', 'GDP: in agriculture etc. (ISIC4 A), output approach, per cent share of GVA',
       'GDP: in industry etc. (ISIC4 B-E), output approach, per cent share of GVA',
       'GDP: in construction (ISIC4 F), output approach, per cent share of GVA',
       'GDP: in trade, hospitality, transport and communication (ISIC4 G-J), output approach, per cent share of GVA',
       'GDP: in finance and business services (ISIC4 K-N), output approach, per cent share of GVA',
       'GDP: in public administration, education and health (ISIC4 O-Q), output approach, per cent share of GVA',
       'GDP: in other service activities (ISIC4 R-U), output approach, per cent share of GVA'])

# df2 = df2.rename(columns = cols)
df2 = df2.groupby(by = "Country", as_index = False).mean()
df2.rename(columns = cols, inplace = True)
# df2['Continent'] = None

# for i,row in df.iterrows():
#   try:
#     df2.loc[i,'Continent'] = convert_continent_code_to_continent_name(country_alpha2_to_continent_code(country_name_to_country_alpha2(row['Country'])))
    
#   except: 
#     pass
df2.dropna(inplace=True)
print(df2.shape)
df2.head(10)

from sklearn import preprocessing
min_max_scaler = preprocessing.MinMaxScaler()

cont = df2['Country'].values
df2 = df2.drop(['Country'],axis = 1)

c = min_max_scaler.fit_transform(df2)
df2 = pd.DataFrame(df2)
df2['Country'] = cont

fig = px.parallel_coordinates(df2,
                              color_continuous_scale=px.colors.diverging.Tealrose,
                              color_continuous_midpoint=2)

fig.show()

pd.plotting.scatter_matrix(df2,diagonal = 'kde', figsize = (20,10))
  plt.savefig("ScatterMatrix.png")
  plt.show()

smcols = list(df2.columns)
smcols.remove("Country")
fig = px.scatter_matrix(df2, dimensions = smcols)

fig.update_traces(diagonal_visible=False)
fig.show()

