# -*- coding: utf-8 -*-
"""D2_Salinity_Temp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MOa_hjhXwVYNLobAJRj-g8nwYKl39T6J
"""

from google.colab import drive
drive.mount("/content/gdrive")

# Commented out IPython magic to ensure Python compatibility.
# %cd gdrive/My\ Drive/Data
!ls

# !pip install -U kaleido

# !pip install orca

# !apt install proj-bin libproj-dev libgeos-dev

# !pip install https://github.com/matplotlib/basemap/archive/master.zip

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
from glob import glob
import os
import pickle
import matplotlib
import matplotlib.pyplot as plt
# from mpl_toolkits.basemap import Basemap
# from mpl_toolkits.mplot3d import Axes3D
from matplotlib.collections import PolyCollection
import matplotlib.animation as animation
import plotly.graph_objects as go
import plotly

!ls

dates = ['"29-DEC-2003"', '"03-JAN-2004"', '"08-JAN-2004"', '"13-JAN-2004"', '"18-JAN-2004"', '"23-JAN-2004"', '"28-JAN-2004"', '"02-FEB-2004"', '"07-FEB-2004"', '"12-FEB-2004"', '"17-FEB-2004"', '"22-FEB-2004"', '"28-FEB-2004"', '"04-MAR-2004"', '"09-MAR-2004"', '"14-MAR-2004"', '"19-MAR-2004"', '"24-MAR-2004"', '"29-MAR-2004"', '"03-APR-2004"', '"08-APR-2004"', '"13-APR-2004"', '"18-APR-2004"', '"23-APR-2004"', '"28-APR-2004"', '"03-MAY-2004"', '"08-MAY-2004"', '"13-MAY-2004"', '"18-MAY-2004"', '"23-MAY-2004"', '"28-MAY-2004"', '"02-JUN-2004"', '"07-JUN-2004"', '"12-JUN-2004"', '"17-JUN-2004"', '"22-JUN-2004"', '"27-JUN-2004"', '"02-JUL-2004"', '"07-JUL-2004"', '"12-JUL-2004"', '"17-JUL-2004"', '"22-JUL-2004"', '"27-JUL-2004"', '"01-AUG-2004"', '"06-AUG-2004"', '"11-AUG-2004"', '"16-AUG-2004"', '"21-AUG-2004"', '"26-AUG-2004"', '"31-AUG-2004"', '"05-SEP-2004"', '"10-SEP-2004"', '"15-SEP-2004"', '"20-SEP-2004"', '"25-SEP-2004"', '"30-SEP-2004"', '"05-OCT-2004"', '"10-OCT-2004"', '"15-OCT-2004"', '"20-OCT-2004"', '"25-OCT-2004"', '"30-OCT-2004"', '"04-NOV-2004"', '"09-NOV-2004"', '"14-NOV-2004"', '"19-NOV-2004"', '"24-NOV-2004"', '"29-NOV-2004"', '"04-DEC-2004"', '"09-DEC-2004"', '"14-DEC-2004"', '"19-DEC-2004"', '"24-DEC-2004"', '"29-DEC-2004"', '"03-JAN-2005"', '"08-JAN-2005"', '"13-JAN-2005"', '"18-JAN-2005"', '"23-JAN-2005"', '"28-JAN-2005"', '"02-FEB-2005"', '"07-FEB-2005"', '"12-FEB-2005"', '"17-FEB-2005"', '"22-FEB-2005"', '"27-FEB-2005"', '"04-MAR-2005"', '"09-MAR-2005"', '"14-MAR-2005"', '"19-MAR-2005"', '"24-MAR-2005"', '"29-MAR-2005"', '"03-APR-2005"', '"08-APR-2005"', '"13-APR-2005"', '"18-APR-2005"', '"23-APR-2005"', '"28-APR-2005"', '"03-MAY-2005"', '"08-MAY-2005"', '"13-MAY-2005"', '"18-MAY-2005"', '"23-MAY-2005"', '"28-MAY-2005"', '"02-JUN-2005"', '"07-JUN-2005"', '"12-JUN-2005"', '"17-JUN-2005"', '"22-JUN-2005"', '"27-JUN-2005"', '"02-JUL-2005"', '"07-JUL-2005"', '"12-JUL-2005"', '"17-JUL-2005"', '"22-JUL-2005"', '"27-JUL-2005"', '"01-AUG-2005"', '"06-AUG-2005"', '"11-AUG-2005"', '"16-AUG-2005"', '"21-AUG-2005"', '"26-AUG-2005"', '"31-AUG-2005"', '"05-SEP-2005"', '"10-SEP-2005"', '"15-SEP-2005"', '"20-SEP-2005"', '"25-SEP-2005"', '"30-SEP-2005"', '"05-OCT-2005"', '"10-OCT-2005"', '"15-OCT-2005"', '"20-OCT-2005"', '"25-OCT-2005"', '"30-OCT-2005"', '"04-NOV-2005"', '"09-NOV-2005"', '"14-NOV-2005"', '"19-NOV-2005"', '"24-NOV-2005"', '"29-NOV-2005"', '"04-DEC-2005"', '"09-DEC-2005"', '"14-DEC-2005"', '"19-DEC-2005"', '"24-DEC-2005"', '"29-DEC-2005"']

# with open('PotentialTemperature_3D.pkl','rb') as Temp_pkl:
#   Templongitudes,Templatitudes,Tempdepths,Tempvalues = pickle.load(Temp_pkl)

with open('Salinity_3D.pkl','rb') as Sal_pkl:
  Sallongitudes,Sallatitudes,Saldepths,Salvalues = pickle.load(Sal_pkl)

print(max([x for x in Salvalues[0] if x is not None]))
print(min([x for x in Salvalues[0] if x is not None]))

i = 0
for i in range(147):
  fig = go.Figure(data=go.Isosurface(
      x=Sallongitudes[i],
      y=Sallatitudes[i],
      z=Saldepths[i],
      value=Salvalues[i],
      isomin=20.0,
      isomax=50.0,
      surface_count=6, # number of isosurfaces, 2 by default: only min and max
      colorbar_nticks=6, # colorbar ticks correspond to isosurface values
      opacity = 0.6,
      caps=dict(x_show=False, y_show=False)
      ))

  l = ''
  for x in dates[i][1:-1].split('-'):
    l += x +  ' '

  fig.update_layout(
           title_text="Salinity Visualization as on : "+l,  
           width=700,
           height=700,
           coloraxis=dict(colorscale='BrBG',
                          colorbar_thickness=25,
                          colorbar_len=0.75))
  # fig.write_image("Images/fig1.png")
  plotly.offline.plot(fig, filename='Images/Salinity/'+dates[i]+'.html')
  print(i)
# fig.show()

def get_slice_index(z,depth):

  start = -1
  end = -1

  for i in range(len(z)):

    if z[i] != depth:
      continue

    if start == -1:
      start = i

    end = i

  return start,end

l,r = get_slice_index(Tempdepths[0], -5)
print(l,r)
print(len(Tempdepths[0]))

x = Templatitudes[0][l:r]
y = Templongitudes[0][l:r]
z = Tempdepths[0][l:r]
v = Tempvalues[0][l:r]

print(len(x),len(y),len(z),len(v))
print(x) 
print(y)
print(z)
print(v)

def colorax(vmin, vmax):
    return dict(cmin=vmin,
                cmax=vmax)

x, y = np.meshgrid(x,y)
v.reshape(x.shape)

fig1 = go.Figure(data = go.Surface(
                  x = x,
                  y = y,
                  z = z,
                  surfacecolor=v,
                  coloraxis='coloraxis'
                  ))

fig1.update_layout(
         title_text='Slices in volumetric data', 
         title_x=0.5,
         width=700,
         height=700, 
         coloraxis=dict(colorscale='BrBG',
                        colorbar_thickness=25,
                        colorbar_len=0.75,
                        **colorax(18,40)))

fig1.show()

scalar_f = lambda x,y,z: x*np.exp(-x**2-y**2-z**2)

x = np.linspace(-2,2, 50)
y = np.linspace(-2,2, 50)
x, y = np.meshgrid(x,y)
z = np.zeros(x.shape)
surfcolor_z = scalar_f(x,y,z)

print(np.shape(x))
print(np.shape(y))
print(np.shape(z))
print(np.shape(surfcolor_z))