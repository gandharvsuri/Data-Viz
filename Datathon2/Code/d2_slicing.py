# -*- coding: utf-8 -*-
"""D2_Slicing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uhx_Jz0s3wjKEOmZy1vofFHcMrzoer9v
"""

from google.colab import drive
drive.mount("/content/gdrive")

# Commented out IPython magic to ensure Python compatibility.
# %cd gdrive/My\ Drive/Data
!ls

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
from glob import glob
import os
import pickle
import matplotlib
import matplotlib.pyplot as plt
# from mpl_toolkits.basemap import Basemap
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.collections import PolyCollection
import matplotlib.animation as animation
import plotly.graph_objects as go
import plotly

dates = ['"29-DEC-2003"', '"03-JAN-2004"', '"08-JAN-2004"', '"13-JAN-2004"', '"18-JAN-2004"', '"23-JAN-2004"', '"28-JAN-2004"', '"02-FEB-2004"', '"07-FEB-2004"', '"12-FEB-2004"', '"17-FEB-2004"', '"22-FEB-2004"', '"28-FEB-2004"', '"04-MAR-2004"', '"09-MAR-2004"', '"14-MAR-2004"', '"19-MAR-2004"', '"24-MAR-2004"', '"29-MAR-2004"', '"03-APR-2004"', '"08-APR-2004"', '"13-APR-2004"', '"18-APR-2004"', '"23-APR-2004"', '"28-APR-2004"', '"03-MAY-2004"', '"08-MAY-2004"', '"13-MAY-2004"', '"18-MAY-2004"', '"23-MAY-2004"', '"28-MAY-2004"', '"02-JUN-2004"', '"07-JUN-2004"', '"12-JUN-2004"', '"17-JUN-2004"', '"22-JUN-2004"', '"27-JUN-2004"', '"02-JUL-2004"', '"07-JUL-2004"', '"12-JUL-2004"', '"17-JUL-2004"', '"22-JUL-2004"', '"27-JUL-2004"', '"01-AUG-2004"', '"06-AUG-2004"', '"11-AUG-2004"', '"16-AUG-2004"', '"21-AUG-2004"', '"26-AUG-2004"', '"31-AUG-2004"', '"05-SEP-2004"', '"10-SEP-2004"', '"15-SEP-2004"', '"20-SEP-2004"', '"25-SEP-2004"', '"30-SEP-2004"', '"05-OCT-2004"', '"10-OCT-2004"', '"15-OCT-2004"', '"20-OCT-2004"', '"25-OCT-2004"', '"30-OCT-2004"', '"04-NOV-2004"', '"09-NOV-2004"', '"14-NOV-2004"', '"19-NOV-2004"', '"24-NOV-2004"', '"29-NOV-2004"', '"04-DEC-2004"', '"09-DEC-2004"', '"14-DEC-2004"', '"19-DEC-2004"', '"24-DEC-2004"', '"29-DEC-2004"', '"03-JAN-2005"', '"08-JAN-2005"', '"13-JAN-2005"', '"18-JAN-2005"', '"23-JAN-2005"', '"28-JAN-2005"', '"02-FEB-2005"', '"07-FEB-2005"', '"12-FEB-2005"', '"17-FEB-2005"', '"22-FEB-2005"', '"27-FEB-2005"', '"04-MAR-2005"', '"09-MAR-2005"', '"14-MAR-2005"', '"19-MAR-2005"', '"24-MAR-2005"', '"29-MAR-2005"', '"03-APR-2005"', '"08-APR-2005"', '"13-APR-2005"', '"18-APR-2005"', '"23-APR-2005"', '"28-APR-2005"', '"03-MAY-2005"', '"08-MAY-2005"', '"13-MAY-2005"', '"18-MAY-2005"', '"23-MAY-2005"', '"28-MAY-2005"', '"02-JUN-2005"', '"07-JUN-2005"', '"12-JUN-2005"', '"17-JUN-2005"', '"22-JUN-2005"', '"27-JUN-2005"', '"02-JUL-2005"', '"07-JUL-2005"', '"12-JUL-2005"', '"17-JUL-2005"', '"22-JUL-2005"', '"27-JUL-2005"', '"01-AUG-2005"', '"06-AUG-2005"', '"11-AUG-2005"', '"16-AUG-2005"', '"21-AUG-2005"', '"26-AUG-2005"', '"31-AUG-2005"', '"05-SEP-2005"', '"10-SEP-2005"', '"15-SEP-2005"', '"20-SEP-2005"', '"25-SEP-2005"', '"30-SEP-2005"', '"05-OCT-2005"', '"10-OCT-2005"', '"15-OCT-2005"', '"20-OCT-2005"', '"25-OCT-2005"', '"30-OCT-2005"', '"04-NOV-2005"', '"09-NOV-2005"', '"14-NOV-2005"', '"19-NOV-2005"', '"24-NOV-2005"', '"29-NOV-2005"', '"04-DEC-2005"', '"09-DEC-2005"', '"14-DEC-2005"', '"19-DEC-2005"', '"24-DEC-2005"', '"29-DEC-2005"']

# with open('Salinity_3D.pkl','rb') as Temp_pkl:
#   longitudes,latitudes,depths,values = pickle.load(Temp_pkl)

with open('PotentialTemperature_3D.pkl','rb') as Temp_pkl:
  longitudes,latitudes,depths,values = pickle.load(Temp_pkl)

def get_index(arr,depth):
  
  start = -1
  end = -1
  for i in range(len(arr)):
    if arr[i] != depth:
      continue
    if start == -1:
      start = i

    end = i

  return start,end+1

frameloop = [(i,get_index(depths[i],x)) for i,x in enumerate(range(-5,-85,-10))]

for i in range(147):
  fig = go.Figure(frames=[go.Frame(data=go.Surface(
      contours = {
          "x": {"show": True, "start": 1.5, "end": 2, "size": 0.04, "color":"white"},
          "z": {"show": True, "start": 0.5, "end": 0.8, "size": 0.05}
      },
      z = (depths[i][l:r][0])*np.ones((180,188)),
      surfacecolor = np.reshape(values[i][l:r],(188,180)).T,
      cmin = 20, cmax = 50
      ),
      name=str(k) # you need to name the frame for the animation to behave properly
      )
      for k,(l,r) in frameloop])

  fig.add_trace(go.Surface(
      contours = {
          "x": {"show": True, "start": 1.5, "end": 2, "size": 0.04, "color":"white"},
          "z": {"show": True, "start": 0.5, "end": 0.8, "size": 0.05}
      },
      z = (depths[0][0:33840][0])*np.ones((180,188)),
      surfacecolor = np.reshape(values[0][0:33840],(188,180)).T,
      cmin =20 , cmax = 50
      ))
  def frame_args(duration):
      return {
              "frame": {"duration": duration},
              "mode": "immediate",
              "fromcurrent": True,
              "transition": {"duration": duration, "easing": "linear"},
          }

  sliders = [
              {
                  "pad": {"b": 10, "t": 60},
                  "len": 0.9,
                  "x": 0.1,
                  "y": 0,
                  "steps": [
                      {
                          "args": [[f.name], frame_args(0)],
                          "label": str(k),
                          "method": "animate",
                      }
                      for k, f in enumerate(fig.frames)
                  ],
              }
          ]

  # Layout
  fig.update_layout(
           title='Sliced for Temprature variables',
           width=600,
           height=600,
           scene=dict(
                      # zaxis=dict(range=[0,24], autorange=False,),
                      zaxis=dict(range=[-85,0], autorange=False, tickmode='array', tickvals = np.arange(0, -220, -20), ticktext = np.arange(5, 85, 20), title=dict(text="Depth(in metres)")),
                      # xaxis=dict(range=[30,120], autorange=False),
                      # yaxis=dict(range=[-30,30], autorange=False),
                      xaxis=dict(autorange="reversed", tickmode='array', tickvals = np.arange(30, 120, 20), ticktext = np.arange(120, 30, -20), title=dict(text="Latitude values")),
                      yaxis=dict(autorange="reversed", title=dict(text="longitude values")),
                      # aspectmode='data'
                      aspectratio=dict(x=1, y=0.7, z=1),
                      ),
           updatemenus = [
              {
                  "buttons": [
                      {
                          "args": [None, frame_args(70)],
                          "label": "&#9654;", # play symbol
                          "method": "animate",
                      },
                      {
                          "args": [[None], frame_args(10)],
                          "label": "&#9724;", # pause symbol
                          "method": "animate",
                      },
                  ],
                  "direction": "left",
                  "pad": {"r": 10, "t": 70},
                  "type": "buttons",
                  "x": 0.1,
                  "y": 0,
              }
           ],
           sliders=sliders
  )
  plotly.offline.plot(fig, filename='Images/Salinity_Slices/'+dates[i]+'.html')
  print(i)

for x in enumerate(dates):
  print(x)

## Plot for 29 Dec 2004

fig = go.Figure(go.Surface(
      contours = {
          "x": {"show": True, "start": 1.5, "end": 2, "size": 0.04, "color":"white"},
          "z": {"show": True, "start": 0.5, "end": 0.8, "size": 0.05}
      },
      z = (depths[27][0:33840][0])*np.ones((180,188)),
      surfacecolor = np.reshape(values[27][0:33840],(188,180)).T,
      cmin =10 , cmax = 40
      ))

fig.update_layout(
           title_text="Temperature Visualization as on : 13 May 2004",  
           width=700,
           height=700,
           coloraxis=dict(colorscale='BrBG',
                          colorbar_thickness=25,
                          colorbar_len=0.75))
fig.show()

i = 73

fig = go.Figure(data=go.Isosurface(
      x=longitudes[i],
      y=latitudes[i],
      z=depths[i],
      value=values[i],
      isomin=10.0,
      isomax=40.0,
      surface_count=6, # number of isosurfaces, 2 by default: only min and max
      colorbar_nticks=6, # colorbar ticks correspond to isosurface values
      opacity = 0.6,
      caps=dict(x_show=False, y_show=False)
      ))

fig.update_layout(
           title_text="Temperature Visualization as on : 29 Dec 2004",  
           width=700,
           height=700,
           coloraxis=dict(colorscale='BrBG',
                          colorbar_thickness=25,
                          colorbar_len=0.75))

fig.show()

## Plot for 29 Dec 2004

fig = go.Figure(go.Surface(
      contours = {
          "x": {"show": True, "start": 1.5, "end": 2, "size": 0.04, "color":"white"},
          "z": {"show": True, "start": 0.5, "end": 0.8, "size": 0.05}
      },
      z = (depths[73][0:33840][0])*np.ones((180,188)),
      surfacecolor = np.reshape(values[73][0:33840],(188,180)).T,
      cmin =20 , cmax = 50
      ))

fig.update_layout(
           title_text="Salinity Visualization as on : 29 Dec 2004",  
           width=700,
           height=700,
           coloraxis=dict(colorscale='BrBG',
                          colorbar_thickness=25,
                          colorbar_len=0.75))
fig.show()

i = 73

fig = go.Figure(data=go.Isosurface(
      x=longitudes[i],
      y=latitudes[i],
      z=depths[i],
      value=values[i],
      isomin=20.0,
      isomax=50.0,
      surface_count=6, # number of isosurfaces, 2 by default: only min and max
      colorbar_nticks=6, # colorbar ticks correspond to isosurface values
      opacity = 0.6,
      caps=dict(x_show=False, y_show=False)
      ))

fig.update_layout(
           title_text="Salinity Visualization as on : 29 Dec 2004",  
           width=700,
           height=700,
           coloraxis=dict(colorscale='BrBG',
                          colorbar_thickness=25,
                          colorbar_len=0.75))

fig.show()