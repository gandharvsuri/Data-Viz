# -*- coding: utf-8 -*-
"""Datathon1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/124EJYyembdw8TlB21RLMY0750_TqGaib
"""

from google.colab import drive
drive.mount("/content/gdrive")

#!apt install proj-bin libproj-dev libgeos-dev

#!pip install https://github.com/matplotlib/basemap/archive/master.zip

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
from glob import glob
import os
import pickle
import matplotlib
import matplotlib.pyplot as plt
from mpl_toolkits.basemap import Basemap
import matplotlib.animation as animation

# Commented out IPython magic to ensure Python compatibility.
# %cd gdrive/My\ Drive/Datathon1

with open("date-long-lat_1.pkl",'rb') as pkl_dlt:
  date_array, long_array, lat_array = pickle.load(pkl_dlt)

with open("SSH-SSS-SST.pkl",'rb') as file_pkl:
  grid_array = pickle.load(file_pkl)

print(np.shape(grid_array))

# (3, 147, 188, 187) (feature, numberOfDays, 188 lat, 187 long)

# 187 longitudes ranging in [29.8892W,119.8237W]
# 188 latitudes ranging in [29.7511S, 29.7511N]
lon_0 = np.mean([29.8892,119.8237])
lat_0 = np.mean([29.7511, 29.7511])

# lat (min,max) = (-29.7511,29.7511)
# long (min,max) = (29.8893,119.8237)

LON,LAT = np.meshgrid(long_array,lat_array)
levels = np.linspace(0.0,1.0,25)

Attr = ["SSHA","SSS","SST"]
for a in range(len(Attr)):
  fig = plt.figure(figsize=(16, 8),dpi = 80)

  map = Basemap(projection='cyl', resolution='c',lat_0=lat_0, lon_0=lon_0,llcrnrlat = -29.7511, urcrnrlat=29.7511,llcrnrlon=29.8893,urcrnrlon=119.8237)
  # map.drawcoastlines()
  map.drawcountries()
  map.drawparallels(np.arange(-90.,90.,10),labels=[1,0,0,0],fontsize = 18)
  map.drawmeridians(np.arange(-180.,180.,10),labels=[0,0,0,1],fontsize = 18)
  fig.suptitle(Attr[a], fontsize = 30)
  inf_min = np.nanmin(grid_array[a])
  inf_max = np.nanmax(grid_array[a])

  x,y = map(LON, LAT)
  CS = map.contourf(LON,LAT,(grid_array[a][0]-inf_min)/(inf_max-inf_min),levels = levels, extend = 'both')
  plt.title(date_array[0],fontsize = 15)
  def animate(i):
    global CS
    for c in CS.collections: c.remove()
    CS = map.contourf(x,y,(grid_array[a][i]-inf_min)/(inf_max-inf_min),levels = levels, extend = 'both')
    plt.title(date_array[i],fontsize = 15)
    return CS
    
  cbar = map.colorbar()
  txt = "Range of values  0: "+str(inf_min) + "    1: "+str(inf_max)
  fig.text(.5, 0.05, txt, ha='center',fontsize = 15)
  anim=animation.FuncAnimation(fig, animate, interval=400)
  mp4filename = Attr[a]+".mp4" 
  anim.save(mp4filename)
  plt.savefig(Attr[a]+".png")
  plt.show()

with open("date-long-lat_2.pkl",'rb') as pkl_dlt:
  date_array, long_array, lat_array = pickle.load(pkl_dlt)

with open("meridonal_zonal.pkl",'rb') as file_pkl:
  grid_array = pickle.load(file_pkl)

print(np.shape(grid_array))

# (2, 147, 189, 181) (features, numberOfDays, 189 lat, 181 long)

# 187 longitudes ranging in [20W,120W]
# 188 latitudes ranging in [30.0005S, 30.0005N]
lon_0 = np.mean([30,120])
lat_0 = np.mean([30.0005, 30.0005])

# lat (min,max) = (-30.0005 30.0005)
# long (min,max) = (30.0 120.0)

LON,LAT = np.meshgrid(long_array,lat_array)

# for a in range(len(Attr)):
fig = plt.figure(figsize=(16, 8),dpi = 80)

map = Basemap(projection='cyl', resolution='c',lat_0=lat_0, lon_0=lon_0,llcrnrlat = -30.0005, urcrnrlat=30.0,llcrnrlon=30.0005,urcrnrlon=120.0)
map.drawcoastlines()
map.drawparallels(np.arange(-90.,90.,10),labels=[1,0,0,0],fontsize = 18)
map.drawmeridians(np.arange(-180.,180.,10),labels=[0,0,0,1],fontsize = 18)
fig.suptitle("CURRENTS' VELOCITY", fontsize = 30)

stp = 100
X , Y= map(LAT,LON)

x = X[0::stp,0::stp]   #plot arrows with stp = 2
y = Y[0::stp,0::stp]
uplt = -1*grid_array[0][0]
vplt = -1*grid_array[1][0]
Q = map.quiver(LON,LAT,uplt,vplt,color='k',scale=100,pivot = 'mid')
plt.title(date_array[0],fontsize = 15)
def animate(i):
  global Q
  uplt = -1*grid_array[0][i]
  vplt = -1*grid_array[1][i]
  plt.title(date_array[i],fontsize = 15)
  Q.set_UVC(uplt,vplt)
  return Q
    
anim=animation.FuncAnimation(fig, animate, interval=400)
mp4filename = "Currents.mp4" 
anim.save(mp4filename)
plt.savefig("currents_veloity.png")
plt.show()

# lat (min,max) = (-29.7511,29.7511)
# long (min,max) = (29.8893,119.8237)

LON,LAT = np.meshgrid(long_array,lat_array)
levels = np.linspace(0.0,1.0,25)

fig = plt.figure(figsize=(16, 8),dpi = 80)
a = 0
map = Basemap(projection='cyl', resolution='c',lat_0=lat_0, lon_0=lon_0,llcrnrlat = -29.7511, urcrnrlat=29.7511,llcrnrlon=29.8893,urcrnrlon=119.8237)
  # map.drawcoastlines()
map.drawcountries()
map.drawparallels(np.arange(-90.,90.,10),labels=[1,0,0,0],fontsize = 18)
map.drawmeridians(np.arange(-180.,180.,10),labels=[0,0,0,1],fontsize = 18)
fig.suptitle("SSHA", fontsize = 30)
inf_min = np.nanmin(grid_array[a])
inf_max = np.nanmax(grid_array[a])

x,y = map(LON, LAT)
CS = map.contour(LON,LAT,(grid_array[a][0]-inf_min)/(inf_max-inf_min),levels = levels, extend = 'both')
plt.title(date_array[0],fontsize = 15)
def animate(i):
  global CS
  for c in CS.collections: c.remove()
  CS = map.contour(x,y,(grid_array[a][i]-inf_min)/(inf_max-inf_min),levels = levels, extend = 'both')
  plt.title(date_array[i],fontsize = 15)
  return CS
    
cbar = map.colorbar()
txt = "Range of values  0: "+str(inf_min) + "    1: "+str(inf_max)
fig.text(.5, 0.05, txt, ha='center',fontsize = 15)
anim=animation.FuncAnimation(fig, animate, interval=400)
mp4filename = "SSHA contour.mp4" 
anim.save(mp4filename)
plt.savefig("SSHA contour.png")
plt.show()
